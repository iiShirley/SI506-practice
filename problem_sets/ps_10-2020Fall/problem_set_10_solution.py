# START PROBLEM SET 10
print('Problem set 10 \n')

# SETUP

import requests, csv, json

ENDPOINT = 'https://swapi.py4e.com/api'

#END SETUP

# Problem 01
def get_swapi_resource(resource, params=None, timeout=20):
    """
    This function initiates an HTTP GET request to the SWAPI service in order to return a
    representation of a resource. <params> is not included in the request if no params is passed to this
    function during the function call. Once a response is received, it is converted to a python dict.

    Parameters:
        resource (str): a url that specifies the resource.
        params (dict): optional dictionary of querystring arguments. The default value is None.
        timeout (int): timeout value in seconds. The default value is 20.

    Returns:
        dict: dictionary representation of the decoded JSON.
    """

    if params:
        response = requests.get(resource, params=params,timeout=timeout)
    else:
        response = requests.get(resource, timeout=timeout)

    return response.json()

# Problem 02
def convert_resource_to_obj(resource_dict, obj_class):
    """
    This function converts a resource dictionary to an object of a given class. The
    <resource_dict> can be a dictionary returned by <get_swapi_resource> or by <read_json>.
    It looks for the keys in the <resource_dict> for a match in the object_class.properties.
    It then creates an object of <obj_class> using the values from the <resource_dict> whose keys
    had a match in the object_class.properties and returns the object.

    Parameters:
        resource (str): a url that specifies the resource.
        obj_class (cls): a class that initiates the instance

    Returns:
        instance (obj): an instance generated by <obj_class>.
    """
    obj_properties = []

    for item in resource_dict.keys():
        if item in obj_class.properties:
            obj_properties.append(resource_dict[item])
    # Do not change the following return statement. The "*" operator is used to unpack the items from the
    # 'obj_properties' list to arguments for instansiating an an object class.
    return obj_class(*obj_properties)

# Problem 04
def write_json(filepath, data):
    """
    This function dumps the JSON object in the dictionary <data> into a file on
    <filepath>.

    Parameters:
        filepath(str): The location and filename of the file to store the JSON
        data(dict): The dictionary that contains the JSON representation of the objects.

    Returns:
        None
    """
    with open(filepath, 'w', encoding='utf-8') as file_obj:
        json.dump(data, file_obj, ensure_ascii=False, indent=2)

# Problem 03
def read_json(filepath):
    """
    This function reads in a JSON file and converts it into a dictionary and returns it.

    Parameters:
        filepath(str): The location and filename of the JSON file

    Returns:
        data(dict): A parsed dictionary of resources.
    """
    with open(filepath, 'r', encoding='utf-8') as file_obj:
        data = json.load(file_obj)
    return data

# Problem 05
class Film:
    """"
    Representation of a Film.

    Attributes:
        title(str): title of the film
        episode_id(str): the episode number of the film
        url(str): the url of the film
        properties(tuple): A tuple of all other attributes of the class
    """
    properties = ("title", "episode_id", "url")
    def __init__(self, title, episode_id, url):
        """
        The constructor of the <Film>. It takes in the given parameters
        and assigns them to the attributes (instance variables) of the class.

        Parameters:
            title(str): title of the film
            episode_id(str): the episode number of the film
            url(str): the url of the film

        Returns:
            None
        """
        self.title = title
        self.episode_id = episode_id
        self.url = url

    def __str__(self):
        """
        This method provides a readbale string representation of the object.

        Parameters:
            None

        Returns:
            An f-string with the syntax: 'The film "<title>" is  episode <episode_id>.'
        """
        return (f'The film "{self.title}" is episode {self.episode_id}.')

    def jsonable(self):
        """
        Return a JSON-friendly representation of the object.
        The key should be the name of instance variable and value should be the corresponding value.
        For example, self.title should be converted in this way:
        {"title": self.title}

        Parameters:
            None

        Returns:
            dict: dictionary of the object's instance variables
        """
        return {
            "title": self.title,
            "episode_id": self.episode_id,
            "url": self.url
        }

class Person:
    """
    Representation of a Person

    Attributes:
        name(str): Name of the person
        hair_color(str): Color of hair
        skin_color(str): Color of skin
        eye_color(str): Color of eye
        gender(str): Gender
        films(list): List of films the person appears in
        url(str): URL to the person
        properties(str): A tuple of all other attributes of the class
    """
    properties = ("name", "hair_color", "skin_color", "eye_color", "gender", "films", "url")

    def __init__(self, name, hair_color, skin_color, eye_color, gender, films, url):
        """
        The constructor of the <Person>. It takes in the given parameters
        and assigns them to the attributes (instance variables) of the class.

        Parameters:
            name(str): Name of the person
            hair_color(str): Color of hair
            skin_color(str): Color of skin
            eye_color(str): Color of eye
            gender(str): Gender
            films(list): List of films the person appears in
            url(str): URL to the person

        Returns:
            None
        """
        self.name = name
        self.hair_color = hair_color
        self.skin_color = skin_color
        self.eye_color = eye_color
        self.gender = gender
        self.films = films
        self.url = url

    def __str__(self):
        """
       This method provides a readable string representation of the object.

        Parameters:
            None

        Returns:
            An f-string with the syntax: "<name> has <hair_color> hair and <eye_color> eyes."
        """
        return (f"{self.name} has {self.hair_color} hair and {self.eye_color} eyes.")

    def update_films(self):
        """
        This method takes the list of URLS and creates new objects of <Film> class for each film class
        and replaces the <films> instance variable with a list of Film objects. It makes use of the
        <convert_resource_to_obj()> method and the <get_swapi_method()>.

        Parameters:
            None

        Retruns:
            None
        """
        film_objs = []
        for film in self.films:
            film_objs.append(convert_resource_to_obj(get_swapi_resource(film), Film))
        self.films = film_objs

    def jsonable(self):
        """
        Return a JSON-friendly representation of the object.
        The key should be the name of instance variable and value should be the corresponding value.
        For example, self.name should be converted in this way:
        {"name": self.name}

        Parameters:
            None
        Returns:S
            dict: dictionary of the object's instance variables
        """
        films = []
        for film in self.films:
            films.append(film.jsonable())
        return {
            "name": self.name,
            "hair_color": self.hair_color,
            "skin_color": self.skin_color,
            "eye_color": self.eye_color,
            "gender": self.gender,
            "films": films,
            "url": self.url
        }

def main():
    """
    Program entry point. Handles program workflow.

    Parameters:
        None

    Returns:
        people_info(dict)
        people_objects(dict)
        rey_instance(str)
        write_dict(dict)
    """

    # Problem 7.1
    people_info = read_json("people.json")
    people_objects = {}

    # Problem 7.2, 7.3
    for key in people_info.keys():
        data = get_swapi_resource(
            ENDPOINT + '/people',
            {'search': people_info[key]['name']}
            )['results'][0]

        person = Person(
            data['name'],
            data['hair_color'],
            data['skin_color'],
            data['eye_color'],
            data['gender'],
            data['films'],
            data['url']
            )
        person.update_films()
        people_objects[data['name']] = person

    rey_instance = people_objects['Rey']
    print(rey_instance)

    # Problem 7.4
    write_dict = {}
    for key in people_objects.keys():
        write_dict[key] = people_objects[key].jsonable()
    write_json("updated_people.json", write_dict)

    # Don't forget to return variables
    # If you want to test your code before you finish all the PS,
    # you can assign None to those return variables
    return people_info, people_objects, rey_instance, write_dict

#Do not delete the lines below.
if __name__=="__main__":
    main()